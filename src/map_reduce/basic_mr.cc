#include <string>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>

#include "map_reduce/protocol.h"

namespace mapReduce{
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
    std::vector<KeyVal> Map(const std::string &content) {
        // Your code goes here
        // Hints: split contents into an array of words.
        std::string curWord;
        size_t size = content.size();
        std::vector<KeyVal> res;
        for (size_t pos = 0; pos < size; pos++)
        {
            char ch = content[pos];
            if (isalpha(ch))
            {
                curWord.push_back(ch);
            } else
            {
                if (curWord.size() > 0)
                {
                    res.push_back({curWord, "1"});
                    curWord.clear();
                }
            }
        }
        if (curWord.size() > 0)
        {
            res.push_back({curWord, "1"});
        }
        return res;
    }

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
    std::string Reduce(const std::string &key, const std::vector<std::string> &values) {
        // Your code goes here
        // Hints: return the number of occurrences of the word.
        return std::to_string(std::accumulate(values.begin(), values.end(), 0, [](const int acc, const std::string &val) ->int {
            return acc + std::stoi(val);
        }));
    }
}